# -*- coding: utf-8 -*-
"""ip1_drveta_odlucivanja_ned4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TVSi29vRyik0MvJifvBq_foKUIW1uC6l
"""

from sklearn.datasets import load_iris
import pandas as pd
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, precision_score, recall_score, classification_report
from matplotlib import pyplot as plt

iris = load_iris()

x = pd.DataFrame(iris.data)     # podaci
y = pd.Series(iris.target)   # klasa    series - jednodimenizoni nizovi

# (150, )
# 150 - redova

y.shape

# (150, 4)
# 150 - redova
# 4 kolone

x.shape

# informacije u x
feature_names = iris.feature_names
feature_names

x.head()

y.hist()

y.unique()

# nedostajuce vrednosti
x.isna().any()

# Normalizacija nije bitna kod drveta odlucivanja, jer posmatramo odvojeno atribute
# Normalizaciju ne moramo
x.describe()

target_names = iris.target_names
target_names

# za projekte : ako ima neku slucajnost staet treba da se postavi da bi dobijali iste rezultate
# u svakom modelu da imamo stratifikovanu podelu
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=12, stratify=y)

model = DecisionTreeClassifier(max_depth=2, class_weight={0:1, 1:50, 2:1})
model.fit(x_train, y_train)

# klase koje je model predvideo
y_pred_train = model.predict(x_train)

confusion_matrix(y_test, y_pred_test)

accuracy_score(y_train, y_pred_train)

y_pred_test = model.predict(x_test)

accuracy_score(y_test, y_pred_test)

confusion_matrix(y_test, y_pred_test)

plt.figure(figsize=(10, 10))
_ = plot_tree(model, feature_names=feature_names, class_names=target_names, filled=True)

print(classification_report(y_test, y_pred_test))

# domaci da model dovedemo do tacnosti do reko 92%

# ovabezno ovg tipa odraditi za projekat jer daju dovoljno dobre rezultate
from sklearn.ensemble import RandomForestClassifier